//
//  DBAdapter.m
//  iOSCodeStructure
//
//  Created by Nishant on 10/01/13.
//  Copyright (c) 2013 Nishant. All rights reserved.
//

#import "DBAdapter.h"

static sqlite3_stmt *select_statement = nil;
static sqlite3_stmt *insert_statement = nil;
static sqlite3_stmt *update_statement = nil;
//static sqlite3_stmt *delete_statement = nil;

@implementation DBAdapter

@synthesize database;

#pragma mark - instance methods called once
-(DBAdapter*) init
{
	//Check and Create Database if not exists
	[self checkAndCreateDatabase];
	
	return self;
}

#pragma mark - Function to check for Database whether exists or not. If not copy it to document directory
-(void)checkAndCreateDatabase
{
	NSString *databasePath = [FunctionManager getDocumentDirectoryPath:g_Database_Name];
	//NSLog(@"%@", databasePath);
	
	NSFileManager *fileManager = [NSFileManager defaultManager];
	NSError *error;
	BOOL bolDBCreateSuccess;
	if(![fileManager fileExistsAtPath:databasePath])
	{
		NSString *databasePathFromApp = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:g_Database_Name];
		bolDBCreateSuccess = [fileManager copyItemAtPath:databasePathFromApp toPath:databasePath error:&error];
		[fileManager release];
	}
	else {
		bolDBCreateSuccess=YES;
	}
	
	if (!bolDBCreateSuccess) {
        NSAssert1(0, @"Failed to create writable database file with message '%@'.", [error localizedDescription]);
    }
	else {
		//Open DB Connection
		if(sqlite3_open([databasePath UTF8String], &database) != SQLITE_OK){
			//sqlite3_close(database);
			NSLog(@"Error on connect to database! Error = %i", sqlite3_open([databasePath UTF8String], &database));
		}
	}
	
	return;
}


#pragma mark -
#pragma mark Sample Methods of Select/Insert/Update/Delete to Copy
-(void)selectEmployeeByEmployeeId:(int)pintEmployeeId :(NSMutableArray *)pArrEmployee{
   	// Open the database. The database was prepared outside the application.
	appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
	
	select_statement = nil;
	NSString *strSelectQuery = [NSString stringWithFormat:@"SELECT employeeID, employeeName, employeeCode, isActive, isDeleted FROM tblEmployee where employeeID=%d", pintEmployeeId];
	const char *sqlStatement = [strSelectQuery UTF8String];
	
	if(sqlite3_prepare_v2(appDelegate.objDBAdapter.database, sqlStatement, -1, &select_statement, NULL) == SQLITE_OK)
	{
		// Loop through the results and add them to the feeds array
		while(sqlite3_step(select_statement) == SQLITE_ROW)
		{
			Employee *objEmployee = [[Employee alloc] init];
			objEmployee.intEmployeeID = sqlite3_column_int(select_statement, 0);
			objEmployee.strEmployeeName = [FunctionManager getStringValueFromChar:(char *)sqlite3_column_text(select_statement, 1)];
			objEmployee.strEmployeeCode = [FunctionManager getStringValueFromChar:(char *)sqlite3_column_text(select_statement, 2)];
			objEmployee.intIsActive = sqlite3_column_int(select_statement, 3);
			objEmployee.intIsDeleted = sqlite3_column_int(select_statement, 4);
			[pArrEmployee addObject:objEmployee];
			[objEmployee release];
		}
	}
	// Release the compiled statement from memory
	sqlite3_finalize(select_statement);
	select_statement = nil;
}
-(int)insertEmployee:(Employee *)pobjEmployee{
	// Open the database. The database was prepared outside the application.
	appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
	
	const char *insertSql;
	insertSql = nil;
	insert_statement = nil;
	
	if(insert_statement == nil)
	{
		insertSql = "INSERT INTO tblEmployee (employeeName, employeeCode, isActive, isDeleted) VALUES(?,?,?,?)";
		if(sqlite3_prepare_v2(appDelegate.objDBAdapter.database, insertSql, -1, &insert_statement, NULL) != SQLITE_OK){
			NSAssert1(0, @"Error: failed to prepare insert statement with message '%s'.", sqlite3_errmsg(appDelegate.objDBAdapter.database));
			return 0;
		}
		
		sqlite3_bind_text(insert_statement, 1, [pobjEmployee.strEmployeeName UTF8String], -1, SQLITE_TRANSIENT);
		sqlite3_bind_text(insert_statement, 2, [pobjEmployee.strEmployeeCode UTF8String], -1, SQLITE_TRANSIENT);
		sqlite3_bind_int(insert_statement, 3, pobjEmployee.intIsActive);
		sqlite3_bind_int(insert_statement, 4, pobjEmployee.intIsDeleted);
		
		//sqlite3_bind_double(insert_statement, 5, pobjEmployee.fltLatitude);
		//sqlite3_bind_double(insert_statement, 6, pobjEmployee.fltLongitude);
	}
	//Insert the values into DB
	if(sqlite3_step(insert_statement) != SQLITE_DONE)
	{
		NSAssert1(0, @"Error: failed to insert into the database with message '%s'.", sqlite3_errmsg(appDelegate.objDBAdapter.database));
		return 0;
	}
	else
	{
		// SQLite provides a method which retrieves the value of the most recently auto-generated primary key sequence
		// in the database. To access this functionality, the table should have a column declared of type
		// "INTEGER PRIMARY KEY"
		int primaryKey = sqlite3_last_insert_rowid(appDelegate.objDBAdapter.database);
		return primaryKey;
	}
	
	//Reset the add statement.
	sqlite3_reset(insert_statement);
	
	return 0;
}
-(BOOL)updateEmployee:(Employee *)pobjEmployee{
	// Open the database. The database was prepared outside the application.
	appDelegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
	
	const char *updateSql;
	updateSql = nil;
	update_statement = nil;
    
	if (update_statement == nil) {
		static char *sql = "UPDATE tblEmployee SET employeeName=?, employeeCode=?, isActive=?, isDeleted=? where employeeID=?";
		if (sqlite3_prepare_v2(appDelegate.objDBAdapter.database, sql, -1, &update_statement, NULL) != SQLITE_OK) {
			NSAssert1(0, @"Error: failed to prepare statement with message '%s'.", sqlite3_errmsg(appDelegate.objDBAdapter.database));
			return FALSE;
		}
	}
	
	sqlite3_bind_text(update_statement, 1, [pobjEmployee.strEmployeeName UTF8String], -1, SQLITE_TRANSIENT);
	sqlite3_bind_text(update_statement, 2, [pobjEmployee.strEmployeeCode UTF8String], -1, SQLITE_TRANSIENT);
	sqlite3_bind_int(update_statement, 3, pobjEmployee.intIsActive);
	sqlite3_bind_int(update_statement, 4, pobjEmployee.intIsDeleted);
	
	sqlite3_bind_int(update_statement, 5, pobjEmployee.intEmployeeID);
	
	if (sqlite3_step(update_statement) == SQLITE_ERROR) {
		NSAssert1(0, @"Error: failed to insert into the database with message '%s'.", sqlite3_errmsg(appDelegate.objDBAdapter.database));
		return FALSE;
	} else {
		return TRUE;
	}
	// All data for the book is already in memory, but has not be written to the database
	// Mark as hydrated to prevent empty/default values from overwriting what is in memory
	
	// Because we want to reuse the statement, we "reset" it instead of "finalizing" it.
	sqlite3_reset(update_statement);
	
	return FALSE;
}
-(BOOL)deleteEmployeeByEmployeeId:(int)pintEmployeeId{
	NSString *sqlString;
	const char *sql;
	sqlString = @"DELETE FROM tblEmployee WHERE employeeID = %d";
	sqlString = [NSString stringWithFormat:sqlString, pintEmployeeId];
	sql = [sqlString UTF8String];
	return [DBFunctionManager executeGeneralQuery:sql];
}

@end
